#!/usr/bin/php
<?php

if (file_exists(__DIR__.'/../../../autoload.php')) 
{
    require __DIR__.'/../../../autoload.php';
    
} 
else 
{
    require __DIR__.'/vendor/autoload.php';
}

use PhangoApp\PhaI18n\I18n;
use PhangoApp\PhaUtils\Utils;
use PhangoApp\PhaRouter\Routes;
use League\CLImate\CLImate;

Utils::load_config('config_i18n');
Utils::load_config('config');

$options=getopt('', array('module:','all'));

$climate = new League\CLImate\CLImate();

if(!isset($options['module']) && !isset($options['all']))
{
    
    $climate->white()->backgroundBlack()->out("Use: checklang [--all] [--module=module] [--status]");
    $climate->white()->backgroundBlack()->out("If you use --module and --all together, the script use the --module option by default");
    
    die;
    
}

$arr_lang=[];

if(isset($options['module']))
{
    
    $arr_modules=[$options['module']];
    
    $dir_search='vendor/'.$options['module'];
    
    if(is_dir($dir_search))
    {
        
        $climate->white()->backgroundBlack()->out("Search in ".$dir_search);
        
        scan_i18n($dir_search);
        
    }
    
}
else
{
    
//Search in vendor directories using composer.json

$json_require=json_decode(file_get_contents('composer.json'), true);

/*[ext-gd] => *
[ext-libxml] => *
[league/climate] => @stable
*/

foreach($json_require['require'] as $package => $version)
{
 
    if($package!='ext-gd' && $package!='ext-libxml' && $package!='league/climate')
    {
        
        $path='vendor/'.$package;
        
        if(is_dir($path))
        {
            
            //Scandir 
            
            scan_i18n($path);
            
        }
        
    }
    
}

}

//Search in views

$climate->white()->backgroundBlack()->out('Writing I18n files...');

foreach($arr_lang as $module_lang => $codelang)
{
    
    foreach(I18n::$arr_i18n as $i18n)
    {
        
        $arr_path=explode('/', $module_lang);
        
        if(count($arr_path)==1)
        {
            
            $file_path='i18n/'.$i18n.'/'.$module_lang.'.php';
            $dir_path='i18n/'.$i18n;
            
        }
        else
        if(count($arr_path)==2)
        {
            
            $file_path=I18n::$modules_path.'/'.$module_lang.'/i18n/'.$i18n.'/'.$arr_path[1].'.php';
            $dir_path=I18n::$modules_path.'/'.$module_lang.'/i18n/'.$i18n;
            
        }
        else
        if(count($arr_path)==3)
        {
            
            $file_path=I18n::$modules_path.'/'.$module_lang.'/i18n/'.$i18n.'/'.$arr_path[2].'.php';
            $dir_path=I18n::$modules_path.'/'.$module_lang.'/i18n/'.$i18n;
            
        }
        
        if(!is_dir($dir_path))
        {
            
            mkdir($dir_path, 0755, true);
            
        }
        
        if(!is_file($file_path))
        {
            
            $file_i18n="<?php\n\n";
            $file_i18n.="use PhangoApp\PhaI18n\I18n;\n\n";
            
            foreach($arr_lang[$module_lang] as $code => $l)
            {
             
                //$l=str_replace("'", '&apos;', $l);
                
                $file_i18n.="I18n::\$lang['${module_lang}']['${code}']='${l}';\n\n";
                
            }
            
            if(file_put_contents($file_path, $file_i18n))
            {
                
                $climate->white()->backgroundBlack()->out('--Writed '.$file_path.' file');
                
            }
            
        }
        else
        {
            
            include($file_path);
            
            if(count(I18n::$lang[$module_lang])<>count($arr_lang[$module_lang]))
            {
                
                $climate->white()->backgroundBlack()->out('Updating lang file '.$file_path.'...');
                
                $file_i18n="<?php\n\n";
                $file_i18n.="use PhangoApp\PhaI18n\I18n;\n\n";
                
                foreach($arr_lang[$module_lang] as $code => $l)
                {
                 
                    //$l=str_replace("'", '&apos;', $l);
                    
                    if(!isset(I18n::$lang[$module_lang][$code]))
                    {
                    
                        $file_i18n.="I18n::\$lang['${module_lang}']['${code}']='${l}';\n\n";
                        
                    }
                    else
                    {
                        
                        $l=I18n::$lang[$module_lang][$code];
                        
                        $file_i18n.="I18n::\$lang['${module_lang}']['${code}']='${l}';\n\n";
                        
                    }
                    
                }
                
                if(file_put_contents($file_path, $file_i18n))
                {
                    
                    $climate->white()->backgroundBlack()->out('--Updated '.$file_path.' file');
                    
                }
                
            }
            
        }
        //$file_path=I18n::$modules_path.'/'.$module_lang.'/;
        
    }
    
}

function scan_i18n($path)
{
    global $arr_lang;
    
    echo "Process directory ".$path."\n";
    
    $arr_folders=scandir($path);
    
    foreach($arr_folders as $file)
    {
        
        $path_file=$path.'/'.$file;
        
        if(preg_match('/^.*\.php$/', $file) && is_file($path_file))
        {
    
            echo "---Process File ".$path_file."\n";
            $file=file_get_contents($path_file);
            
            
            $pattern_file="|I18n::lang\('(.*)',\s+'(.*)',\s+'(.*)'\)|U";
    
            if(preg_match_all ( $pattern_file, $file, $arr_match_lang, PREG_SET_ORDER)) 
            {
                
                /* => Array
        (
                [0] => I18n::lang('phangoapp/leviathan', 'update_servers', 'Make task in selected servers'
                [1] => phangoapp/leviathan
                [2] => update_servers
                [3] => Make task in selected servers
                */
                
                foreach($arr_match_lang as $match_lang)
                {
                    
                    $arr_lang[$match_lang[1]][$match_lang[2]]=str_replace("'", "\\'", $match_lang[3]);
                    
                }

                
            }
            
            
        }
        else
        if(is_dir($path_file) && !preg_match('/^\..*$/', $file) && $file!='i18n')
        {
            
            scan_i18n($path_file);
            
        }
        
    }
    
}

?>
